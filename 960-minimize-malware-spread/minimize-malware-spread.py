class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def find(x):
            while x != parent[x]:
                parent[x] = parent[parent[x]]
                x = parent[x]
            return x

        def union(u, v):
            parU = find(u)
            parV = find(v)
            if parU != parV:
                sizeV = size[parV]
                sizeU = size[parU]
                if sizeU >= sizeV:
                    parent[parV] = parU
                    size[parU] += sizeV
                elif sizeV > sizeU:
                    parent[parU] = parV
                    size[parV] += sizeU

        parent = {i: i for i in range(len(graph))}
        size = [1] * len(graph)

        for i in range(len(graph)):
            for j in range(len(graph)):
                if i != j and graph[i][j] == 1:
                    union(i, j)

        freq = defaultdict(int)
        for ini in initial:
            par = find(ini)
            freq[par] += 1

        ans = (0, float("inf"))  # (node, freq)
        for ini in sorted(initial):
            par = find(ini)
            if freq[par] == 1 and freq[par] < ans[1]:
                ans = (ini, freq[par])
                
            elif freq[par] == ans[1] and ans[1] == 1:
                par2 = find(ans[0])
                ans = (ini, freq[par]) if size[par] > size[par2] else ans

            elif freq[par] < ans[1] and ans[1] == float("inf"):
                ans = (ini, freq[par])


        return ans[0]
